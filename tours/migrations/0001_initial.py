# Generated by Django 4.2.14 on 2024-08-14 15:45

import ckeditor.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('SiteSetting', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the tour category, such as trekking, sightseeing, etc.', max_length=200, unique=True)),
                ('icon_class', models.CharField(default='<i class="icon-office text-24 text-accent-1"></i>', help_text='Enter the CSS class for the Category icon.', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='GroupEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the title of the tour or event. This will be displayed to users.', max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('overview', ckeditor.fields.RichTextField(help_text='Provide a brief overview of the tour or event.')),
                ('includes', ckeditor.fields.RichTextField(help_text='List what is included in the tour or event.')),
                ('excludes', ckeditor.fields.RichTextField(help_text='List what is not included in the tour or event.')),
                ('rules', ckeditor.fields.RichTextField(help_text='Specify any rules for the tour or event.')),
                ('refund_policy', ckeditor.fields.RichTextField(help_text='Describe the refund policy for the tour or event.')),
                ('max_participants', models.PositiveIntegerField(help_text='Maximum number of participants allowed for the tour or event.')),
                ('price', models.DecimalField(decimal_places=2, help_text='Enter the price for the tour or event.', max_digits=10)),
                ('duration_nights', models.PositiveIntegerField(help_text='Number of nights the tour or event will last.')),
                ('duration_days', models.PositiveIntegerField(help_text='Number of days the tour or event will last.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Check if the tour or event is featured.')),
                ('is_active', models.BooleanField(default=True, help_text='Check if the tour or event is currently active.')),
                ('booking_policy', ckeditor.fields.RichTextField(blank=True, help_text='Booking Policy', verbose_name='Booking Policy')),
                ('advance_percentage', models.PositiveIntegerField(default=20, help_text='Percentage of the total price required for confirmation.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('start_date', models.DateField(help_text='Start date of the group event.')),
                ('end_date', models.DateField(help_text='End date of the group event.')),
                ('category', models.ForeignKey(help_text='Select the category for the tour or event.', on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_related', to='tours.category')),
                ('city', models.ForeignKey(help_text='Select the city where the tour or event will take place.', on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_related', to='SiteSetting.city')),
                ('country', models.ForeignKey(help_text='Select the country where the tour or event will take place.', on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_related', to='SiteSetting.country')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.ImageField(help_text='Upload an image.', upload_to='gallery/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('caption', models.CharField(blank=True, help_text='Enter an optional caption for the image.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the place.', max_length=200)),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Provide a brief description of the place.')),
                ('city', models.ForeignKey(help_text='Select the location city name.', on_delete=django.db.models.deletion.CASCADE, related_name='places', to='SiteSetting.city')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the name of the service.', max_length=200)),
                ('icon_class', models.CharField(help_text='Enter the CSS class for the service icon.', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the title of the tour or event. This will be displayed to users.', max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('overview', ckeditor.fields.RichTextField(help_text='Provide a brief overview of the tour or event.')),
                ('includes', ckeditor.fields.RichTextField(help_text='List what is included in the tour or event.')),
                ('excludes', ckeditor.fields.RichTextField(help_text='List what is not included in the tour or event.')),
                ('rules', ckeditor.fields.RichTextField(help_text='Specify any rules for the tour or event.')),
                ('refund_policy', ckeditor.fields.RichTextField(help_text='Describe the refund policy for the tour or event.')),
                ('max_participants', models.PositiveIntegerField(help_text='Maximum number of participants allowed for the tour or event.')),
                ('price', models.DecimalField(decimal_places=2, help_text='Enter the price for the tour or event.', max_digits=10)),
                ('duration_nights', models.PositiveIntegerField(help_text='Number of nights the tour or event will last.')),
                ('duration_days', models.PositiveIntegerField(help_text='Number of days the tour or event will last.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Check if the tour or event is featured.')),
                ('is_active', models.BooleanField(default=True, help_text='Check if the tour or event is currently active.')),
                ('category', models.ForeignKey(help_text='Select the category for the tour or event.', on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_related', to='tours.category')),
                ('city', models.ForeignKey(help_text='Select the city where the tour or event will take place.', on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_related', to='SiteSetting.city')),
                ('country', models.ForeignKey(help_text='Select the country where the tour or event will take place.', on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_related', to='SiteSetting.country')),
                ('places', models.ManyToManyField(blank=True, help_text='Select the places for the tour or event.', related_name='%(app_label)s_%(class)s_related', to='tours.place')),
                ('services', models.ManyToManyField(blank=True, help_text='Select the services included in the tour or event.', related_name='%(app_label)s_%(class)s_related', to='tours.service')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TourBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Upload a background image for the tour banner.', upload_to='background_images/')),
                ('title', models.CharField(blank=True, help_text='Enter an optional title for the tour banner.', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=False, help_text='Activate this banner.')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Upload a video.', upload_to='videos/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('caption', models.CharField(blank=True, help_text='Enter an optional caption for the video.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TourVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='tours.tour')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tour_videos', to='tours.video')),
            ],
        ),
        migrations.CreateModel(
            name='TourItinerary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the itinerary item.', max_length=200)),
                ('day', models.PositiveIntegerField(help_text='Day number in the itinerary.', verbose_name='Day')),
                ('description', ckeditor.fields.RichTextField(help_text='Description of the itinerary item.', verbose_name='Description')),
                ('group_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='itineraries', to='tours.groupevent')),
                ('tour', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='itineraries', to='tours.tour')),
            ],
            options={
                'verbose_name': 'Tour Itinerary',
                'verbose_name_plural': 'Tour Itineraries',
            },
        ),
        migrations.CreateModel(
            name='TourImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_main', models.BooleanField(default=False, help_text='Check if this is the main image for the tour.')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tour_images', to='tours.image')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='tours.tour')),
            ],
        ),
        migrations.CreateModel(
            name='GroupEventVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='tours.groupevent')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_event_videos', to='tours.video')),
            ],
        ),
        migrations.CreateModel(
            name='GroupEventImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_main', models.BooleanField(default=False, help_text='Check if this is the main image for the group event.')),
                ('group_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='tours.groupevent')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_event_images', to='tours.image')),
            ],
        ),
        migrations.AddField(
            model_name='groupevent',
            name='places',
            field=models.ManyToManyField(blank=True, help_text='Select the places for the tour or event.', related_name='%(app_label)s_%(class)s_related', to='tours.place'),
        ),
        migrations.AddField(
            model_name='groupevent',
            name='services',
            field=models.ManyToManyField(blank=True, help_text='Select the services included in the tour or event.', related_name='%(app_label)s_%(class)s_related', to='tours.service'),
        ),
    ]
